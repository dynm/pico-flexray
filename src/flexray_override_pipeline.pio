; This PIO file contains two programs that work together as a pipeline to
; implement a flexible "on-the-fly" FlexRay frame interceptor.
;
; This implementation is designed based on a two-channel requirement, where
; each channel has a "sniffer" and a "muxer". This file provides the two
; generic PIO programs. The main C code should instantiate two of each,
; configuring the GPIOs appropriately for each channel.
;
; It uses IRQ for reliable synchronization between the sniffer and the muxer,
; and adopts a 10-cycle-per-bit timing model, assuming a 100MHz system clock
; for 10Mbit/s FlexRay communication.

; 40 bit Header
; TSS = Low for 5-15 bit, FSS = 01,BSS = 10
; 10xxxxxFRA
; 10MEIDIDID

; --- Program 1: The FrameID Matcher/Decoder ---
; This program listens to a FlexRay bus, waits for a valid frame, decodes
; its Frame ID, and compares it to a target ID pre-loaded by the CPU.
; It signals its decision on a dedicated output pin for the muxer to read,
; and uses an IRQ to synchronize the start of the process with the muxer.
.program flexray_frameid_matcher
.define public CYCLE_REPETITION_BITS_POW 2 ; 2bit lsb means 2**2, repeatevery 4 cycles
; OVERRIDE_ENABLE output pin. 
; RX input pin.
.wrap_target
entry_point:
    mov isr, null
    wait 1 irq 0 ; wait for bss streamer start

set x, 4 ; skip 5 indicator bits
skip_indicator_bits:
    nop [8]
    jmp x-- skip_indicator_bits

set x, 10 ; read 11 bits of ID
read_frame_id:
    in pins, 1 [8]
    jmp x-- read_frame_id

set x, 21 ; payload len(7) + crc(11) + cycle(6) - CYCLE_REPETITION_BITS_POW - 1
advance_to_cycle_count_lsb:
    nop [8]
    jmp x-- advance_to_cycle_count_lsb

set x, CYCLE_REPETITION_BITS_POW
read_cycle_count_lsb:
    in pins, 1 [8]
    jmp x-- read_cycle_count_lsb
; now the sampling phase shifted by 4 set instructions, very near to the next bit start

start_matching:
    mov x, isr
    pull noblock
    mov y, osr
    jmp x!=y, mismatch
match:
    set pins, 1
    wait 1 irq 1 ; wait for bss streamer stop
    set pins, 0
    jmp entry_point

mismatch:
    set pins, 0
    wait 1 irq 1
.wrap


; --- Program 2: The Forwarder ---

.program flexray_forwarder
.wrap_target
entry_point:
    jmp pin, forward_loop
inject_loop:
    set pins, 1 [9]
    set pins, 0 [9]
    set x, 7
out_1_byte:
    out pins, 1 [8]
    jmp x-- out_1_byte  
    jmp entry_point
forward_loop:
    mov pins, pins
    mov osr, null [7]
.wrap

% c-sdk {

void flexray_forwarder_program_init(PIO pio, uint sm, uint offset, uint rx_pin, uint tx_pin, uint inject_switch_pin) {
    // Now, let PIO take control of the pins.
    pio_gpio_init(pio, tx_pin);

    pio_sm_set_consecutive_pindirs(pio, sm, tx_pin, 1, true);
    pio_sm_config c = flexray_forwarder_program_get_default_config(offset);

    sm_config_set_in_pins(&c, rx_pin);
    sm_config_set_jmp_pin(&c, inject_switch_pin);
    sm_config_set_out_pins(&c, tx_pin, 1);
    // oversample by 10, 10MHz flexray bit rate, 100MHz clock
    float div = (float)clock_get_hz(clk_sys) / (10 * 1000000 * 10);
    sm_config_set_clkdiv(&c, div);
    sm_config_set_in_shift(&c, false, true, 32); // BSS is MSB first, Shift left, autopush
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
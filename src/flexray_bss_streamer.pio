; A PIO program that continuously finds FlexRay frames, streams them,
; and raises an interrupt after each one, without ever stopping.

.program flexray_bss_streamer
.fifo rx
.in 1 left auto 8 ; BSS is MSB first, Shift left, autopush
.side_set 1 opt ; Side-set pin 0 is used to control the transmitter enable (TX_EN)

.define public IDLE_COUNT 10     ; For 11 * 10 = 110 cycle initial idle check.
; Set timeout counter to 31 (max value for a 5-bit immediate).
; This allows for 32 iterations of the 2-cycle polling loop, giving a
; timeout of 64 PIO cycles (~6.4 FlexRay bit times). This is ample
; time to find a BSS and a robust threshold for detecting EOP.
.define public BSS_SEARCH_TIMEOUT 31
.define public DATA_BITS 7       ; Loop 8 times for 8 bits.

.wrap_target
entry_point:
    set x, IDLE_COUNT side 1
    ; --- 1. Initial Bus Idle Check ---
    ; this loop does not need to be aligned to the center of the bit window.
    ; it only detects 11 bits high, the wait will catch the edge.
idle_loop:
    jmp pin is_high [7]
    jmp entry_point
is_high:
    jmp x-- idle_loop [1]
    ; idle: 11bit
    ; tss: 5-15bit high
    ; fss: 1bit high
    ; bss: 1 high 1 low
    ;      idle   tss        fbss
    ; ¯¯¯¯¯¯¯¯¯¯¯|__________|¯¯|_|¯|_
    wait 0 pin 0             ; wait for TSS low
    wait 0 irq 7             ; wait for lock
    irq set 7                ; acquire lock and enable tx_en
    ; this will make a 780ns glitch on tx_en if irq cleared by another SM.
    ; this tx_en glich is acceptable because it is happend on bus idle.
    wait 1 pin 0     [6]  side 0   ;  wait for FSS high
    set x, BSS_SEARCH_TIMEOUT  [2] ; 6+1+2=9, skip 1 bit of FSS high

; search for bss falling edge at 50MHz [State Machine@100MHz]
; it will lead to signal phase shift at most 10ns, it is ok.
find_bss_falling_edge_loop:
    jmp pin high_path           ; 1 cycle. If pin is HIGH, jump.
    jmp found_falling_edge      ; 1 cycle. If pin is LOW, we found the edge!

high_path:
    jmp x-- find_bss_falling_edge_loop      ; 1 cycle. Pin was HIGH, decrement timeout, loop again.
    jmp frame_end               ; frame end.

found_falling_edge:             ; 2nd cycle of BSS low
    nop [7]                     ; 2+8=10, skip 1 bit of BSS low
    set y, DATA_BITS [3]        ; skip 5 cycles, sample at near center of data bit
sample_byte_loop:
    in pins, 1                     ; Sample bit at its center, total 10 cycles/bit.
    mov pins, pins   [6]           ; Transfer bits to detector.
    jmp y-- sample_byte_loop [1]

; jmp find_bss_falling_edge_loop
bss_stall_low_detection_loop:
    set x, BSS_SEARCH_TIMEOUT   ; Reuse the timeout counter.
wait_bss_high_loop:             ; Avoid stall by low pin.
    jmp pin high_path           ; If pin is high, the bus is in a good state.
    jmp x-- wait_bss_high_loop  ; Otherwise, decrement counter and re-check.
                                ; If we timeout, the bus is stuck low. Abort.
frame_end:
    wait 1 pin 0   ; wait for idle, fix for DTS tx_en pull up too early
    mov isr, null   ; reset isr counter
    irq set 3      ; notify CPU
    irq clear 7    ; release lock
.wrap

% c-sdk {

void flexray_bss_streamer_program_init(PIO pio, uint sm, uint offset, uint rx_pin, uint tx_en_pin) {
    // Now, let PIO take control of the pins.
    pio_gpio_init(pio, tx_en_pin);

    pio_sm_set_consecutive_pindirs(pio, sm, rx_pin, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, tx_en_pin, 1, true);
    pio_sm_config c = flexray_bss_streamer_program_get_default_config(offset);

    sm_config_set_in_pins(&c, rx_pin);
    sm_config_set_jmp_pin(&c, rx_pin);
    sm_config_set_sideset_pins(&c, tx_en_pin);
    // oversample by 10, 10MHz flexray bit rate, 100MHz clock
    float div = (float)clock_get_hz(clk_sys) / (10 * 1000000 * 10);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

%}